<%= form_with url: importance.import_path, method: :post do |form| %>
  <%= form.submit t('importance.import'), class: @layout.submit_class %>
  <div class="importance-wrapper <%= @layout.wrapper_class %>">
    <table class="importance-table <%= @layout.table_class %>">
      <thead>
        <tr>
          <% @file_headers.each_with_index do |file_header, file_header_idx| %>
            <th>
              <%= t('importance.use_column_as') %>
              <%
                attribute_mappings = Importance::Header.match_attributes_to_headers(@importer_attributes, @file_headers)
                default_value = Importance::Header.default_value_for_header(file_header, attribute_mappings)
              %>
              <%= form.select "mappings[#{file_header_idx}]",
                              options_for_select(
                                [[t('importance.ignore'), ""]] + 
                                @importer_attributes.map { |attr| [attr.labels.first, attr.key] },
                                default_value
                              ), {}, class: @layout.select_class %>
            </th>
          <% end %>
        </tr>
        <tr>
          <% @file_headers.each do |file_header| %>
            <th><%= file_header %></th>
          <% end %>
        </tr>
      </thead>
      <tbody>
        <% @samples.each do |sample| %>
          <tr>
            <% @file_headers.each_with_index do |file_header, file_header_idx| %>
              <td><%= sample[file_header_idx] %></td>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
  <p>
    <%= t('importance.import_description', count: @samples.count, full_count: @full_count) %>
  </p>
<% end %>

<script>
  const table = document.querySelector('.importance-table');
  if (table) {
    const selects = table.querySelectorAll('thead tr:first-child th select');
    const dataRows = table.querySelectorAll('tbody tr, thead tr');

    const updateIgnoredColumns = () => {
      dataRows.forEach(row => {
        Array.from(row.children).forEach(cell => {
          if (cell.tagName === 'TD' || cell.tagName == 'TH') {
            cell.classList.remove('ignored');
          }
        });
      });

      selects.forEach(selectElement => {
        if (selectElement.value === "") {
          const headerCell = selectElement.closest('th');
          if (headerCell && headerCell.parentElement) {
            const columnIndex = Array.from(headerCell.parentElement.children).indexOf(headerCell);

            if (columnIndex !== -1) {
              dataRows.forEach(row => {
                const cell = row.children[columnIndex];
                if (cell && (cell.tagName === 'TD' || cell.tagName === 'TH')) {
                  cell.classList.add('ignored');
                }
              });
            }
          }
        }
      });
    };

    updateIgnoredColumns();

    selects.forEach(selectElement => {
      selectElement.addEventListener('change', updateIgnoredColumns);
    });
  }
</script>
