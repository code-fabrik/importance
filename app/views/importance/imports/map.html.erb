<%= form_with url: importance.import_path, method: :post do |form| %>
  <div class="importance-wrapper <%= @layout.wrapper_class %>">
    <table class="importance-table <%= @layout.table_class %>">
      <thead>
        <tr>
          <% @headers.each_with_index do |header, index| %>
            <th>
              <%= t('importance.use_column_as') %>
              <%= form.select "mappings[#{header.name}]",
                              options_for_select(
                                header.candidates.map { |c| [c.labels.first, c.key] },
                                header.candidates.first&.key
                              ), {}, class: @layout.select_class %>
            </th>
          <% end %>
          <th><%= form.submit t('importance.save'), class: @layout.submit_class %></th>
        </tr>
        <tr>
          <% @headers.each do |header| %>
            <th><%= header.name %></th>
          <% end %>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <% @samples.each do |sample| %>
          <tr>
            <% sample.each do |header, value| %>
              <td><%= value %></td>
            <% end %>
            <td></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
<% end %>

<script>
  const table = document.querySelector('.importance-table');
  if (table) {
    const selects = table.querySelectorAll('thead tr:first-child th select');
    const dataRows = table.querySelectorAll('tbody tr, thead tr');

    const updateIgnoredColumns = () => {
      dataRows.forEach(row => {
        Array.from(row.children).forEach(cell => {
          if (cell.tagName === 'TD' || cell.tagName == 'TH') {
            cell.classList.remove('ignored');
          }
        });
      });

      selects.forEach(selectElement => {
        if (selectElement.value === "") {
          const headerCell = selectElement.closest('th');
          if (headerCell && headerCell.parentElement) {
            const columnIndex = Array.from(headerCell.parentElement.children).indexOf(headerCell);

            if (columnIndex !== -1) {
              dataRows.forEach(row => {
                const cell = row.children[columnIndex];
                if (cell && (cell.tagName === 'TD' || cell.tagName === 'TH')) {
                  cell.classList.add('ignored');
                }
              });
            }
          }
        }
      });
    };

    updateIgnoredColumns();

    selects.forEach(selectElement => {
      selectElement.addEventListener('change', updateIgnoredColumns);
    });
  }
</script>
